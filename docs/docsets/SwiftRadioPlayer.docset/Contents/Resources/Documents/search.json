{"Protocols/SwiftRadioPlayerDelegate.html#/c:@M@SwiftRadioPlayer@objc(pl)SwiftRadioPlayerDelegate(im)radioPlayer:playerStateDidChange:":{"name":"radioPlayer(_:playerStateDidChange:)","abstract":"<p>Called when player changes state</p>","parent_name":"SwiftRadioPlayerDelegate"},"Protocols/SwiftRadioPlayerDelegate.html#/c:@M@SwiftRadioPlayer@objc(pl)SwiftRadioPlayerDelegate(im)radioPlayer:playbackStateDidChange:":{"name":"radioPlayer(_:playbackStateDidChange:)","abstract":"<p>Called when the player changes the playing state</p>","parent_name":"SwiftRadioPlayerDelegate"},"Protocols/SwiftRadioPlayerDelegate.html#/c:@M@SwiftRadioPlayer@objc(pl)SwiftRadioPlayerDelegate(im)radioPlayer:itemDidChange:":{"name":"radioPlayer(_:itemDidChange:)","abstract":"<p>Called when player changes the current player item</p>","parent_name":"SwiftRadioPlayerDelegate"},"Protocols/SwiftRadioPlayerDelegate.html#/c:@M@SwiftRadioPlayer@objc(pl)SwiftRadioPlayerDelegate(im)radioPlayer:metadataDidChange:trackName:":{"name":"radioPlayer(_:metadataDidChange:trackName:)","abstract":"<p>Called when player item changes the timed metadata value, it uses (separatedBy: <q>-</q>) to get the artist/song name, if you want more control over the raw metadata, consider using <code>metadataDidChange rawValue</code> instead</p>","parent_name":"SwiftRadioPlayerDelegate"},"Protocols/SwiftRadioPlayerDelegate.html#/c:@M@SwiftRadioPlayer@objc(pl)SwiftRadioPlayerDelegate(im)radioPlayer:metadataDidChange:":{"name":"radioPlayer(_:metadataDidChange:)","abstract":"<p>Called when player item changes the timed metadata value</p>","parent_name":"SwiftRadioPlayerDelegate"},"Protocols/SwiftRadioPlayerDelegate.html#/c:@M@SwiftRadioPlayer@objc(pl)SwiftRadioPlayerDelegate(im)radioPlayer:artworkDidChange:":{"name":"radioPlayer(_:artworkDidChange:)","abstract":"<p>Called when the player gets the artwork for the playing song</p>","parent_name":"SwiftRadioPlayerDelegate"},"Protocols/SwiftRadioPlayerDelegate.html":{"name":"SwiftRadioPlayerDelegate","abstract":"<p>The <code>SwiftRadioPlayerDelegate</code> protocol defines methods you can implement to respond to playback events associated with an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/SwiftRadioPlayer.html\">SwiftRadioPlayer</a></code> object.</p>"},"Enums/SwiftRadioPlayerState.html#/c:@M@SwiftRadioPlayer@E@SwiftRadioPlayerState@SwiftRadioPlayerStateUrlNotSet":{"name":"urlNotSet","abstract":"<p>URL not set</p>","parent_name":"SwiftRadioPlayerState"},"Enums/SwiftRadioPlayerState.html#/c:@M@SwiftRadioPlayer@E@SwiftRadioPlayerState@SwiftRadioPlayerStateReadyToPlay":{"name":"readyToPlay","abstract":"<p>Player is ready to play</p>","parent_name":"SwiftRadioPlayerState"},"Enums/SwiftRadioPlayerState.html#/c:@M@SwiftRadioPlayer@E@SwiftRadioPlayerState@SwiftRadioPlayerStateLoading":{"name":"loading","abstract":"<p>Player is loading</p>","parent_name":"SwiftRadioPlayerState"},"Enums/SwiftRadioPlayerState.html#/c:@M@SwiftRadioPlayer@E@SwiftRadioPlayerState@SwiftRadioPlayerStateLoadingFinished":{"name":"loadingFinished","abstract":"<p>The loading has finished</p>","parent_name":"SwiftRadioPlayerState"},"Enums/SwiftRadioPlayerState.html#/c:@M@SwiftRadioPlayer@E@SwiftRadioPlayerState@SwiftRadioPlayerStateError":{"name":"error","abstract":"<p>Error with playing</p>","parent_name":"SwiftRadioPlayerState"},"Enums/SwiftRadioPlayerState.html#/s:12SwiftRadioPlayer0aB5StateO11descriptionSSv":{"name":"description","abstract":"<p>Return a readable description</p>","parent_name":"SwiftRadioPlayerState"},"Enums/FRadioPlaybackState.html#/c:@M@SwiftRadioPlayer@E@FRadioPlaybackState@FRadioPlaybackStatePlaying":{"name":"playing","abstract":"<p>Player is playing</p>","parent_name":"FRadioPlaybackState"},"Enums/FRadioPlaybackState.html#/c:@M@SwiftRadioPlayer@E@FRadioPlaybackState@FRadioPlaybackStatePaused":{"name":"paused","abstract":"<p>Player is paused</p>","parent_name":"FRadioPlaybackState"},"Enums/FRadioPlaybackState.html#/c:@M@SwiftRadioPlayer@E@FRadioPlaybackState@FRadioPlaybackStateStopped":{"name":"stopped","abstract":"<p>Player is stopped</p>","parent_name":"FRadioPlaybackState"},"Enums/FRadioPlaybackState.html#/s:12SwiftRadioPlayer0A13PlaybackStateO11descriptionSSv":{"name":"description","abstract":"<p>Return a readable description</p>","parent_name":"FRadioPlaybackState"},"Enums/FRadioPlaybackState.html":{"name":"FRadioPlaybackState","abstract":"<p><code>FRadioPlayingState</code> is the Player playing state enum</p>"},"Enums/SwiftRadioPlayerState.html":{"name":"SwiftRadioPlayerState","abstract":"<p><code>SwiftRadioPlayerState</code> is the Player status enum</p>"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC6sharedABvZ":{"name":"shared","abstract":"<p>Returns the singleton <code>SwiftRadioPlayer</code> instance.</p>","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC8delegateAA0aB8Delegate_pSgXwv":{"name":"delegate","abstract":"<p>The delegate object for the <code>SwiftRadioPlayer</code>.","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC8radioURL10Foundation0D0VSgv":{"name":"radioURL","abstract":"<p>The player current radio URL</p>","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC10isAutoPlaySbv":{"name":"isAutoPlay","abstract":"<p>The player starts playing when the radioURL property gets set. (default == true)</p>","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC13enableArtworkSbv":{"name":"enableArtwork","abstract":"<p>Enable fetching albums artwork from the iTunes API. (default == true)</p>","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC11artworkSizeSiv":{"name":"artworkSize","abstract":"<p>Artwork image size. (default == 100 | 100x100)</p>","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC4rateSfSgv":{"name":"rate","abstract":"<p>Read only property to get the current AVPlayer rate.</p>","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC9isPlayingSbv":{"name":"isPlaying","abstract":"<p>Check if the player is playing</p>","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC5stateAA0aB5StateOv":{"name":"state","abstract":"<p>Player current state of type <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/SwiftRadioPlayerState.html\">SwiftRadioPlayerState</a></code></p>","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC13playbackStateAA0a8PlaybackD0Ov":{"name":"playbackState","abstract":"<p>Playing state of type <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/FRadioPlaybackState.html\">FRadioPlaybackState</a></code></p>","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC4playyyF":{"name":"play()","abstract":"<p>Trigger the play function of the radio player</p>","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC5pauseyyF":{"name":"pause()","abstract":"<p>Trigger the pause function of the radio player</p>","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC4stopyyF":{"name":"stop()","abstract":"<p>Trigger the stop function of the radio player</p>","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html#/s:12SwiftRadioPlayerAAC13togglePlayingyyF":{"name":"togglePlaying()","abstract":"<p>Toggle isPlaying state</p>","parent_name":"SwiftRadioPlayer"},"Classes/SwiftRadioPlayer.html":{"name":"SwiftRadioPlayer","abstract":"<p>SwiftRadioPlayer is a wrapper around AVPlayer to handle internet radio playback.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"}}